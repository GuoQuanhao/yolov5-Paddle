# YOLOv5 Reproduction ðŸš€ by GuoQuanhao, GPL-3.0 license
"""
Activation functions
"""

import paddle
import paddle.nn as nn
import paddle.nn.functional as F
from paddle.autograd import PyLayer
from paddle.nn.initializer import Normal


class Silu(nn.Layer):
    # Silu activation https://arxiv.org/pdf/1606.08415.pdf
    @staticmethod
    def forward(x):
        return x * F.sigmoid(x)


class Hardswish(nn.Layer):
    # Hard-Silu activation
    @staticmethod
    def forward(x):
        # return x * F.hardsigmoid(x)  # for TorchScript and CoreML
        return x * F.hardtanh(x + 3, 0.0, 6.0) / 6.0  # for TorchScript, CoreML and ONNX


class Mish(nn.Layer):
    # Mish activation https://github.com/digantamisra98/Mish
    @staticmethod
    def forward(x):
        return x * F.softplus(x).tanh()


class MemoryEfficientMish(nn.Layer):
    # Mish activation memory-efficient
    class F(PyLayer):

        @staticmethod
        def forward(ctx, x):
            ctx.save_for_backward(x)
            return x.multiply(paddle.tanh(F.softplus(x)))  # x * tanh(ln(1 + exp(x)))

        @staticmethod
        def backward(ctx, grad_output):
            x = ctx.saved_tensors[0]
            sx = F.sigmoid(x)
            fx = F.softplus(x).tanh()
            return grad_output * (fx + x * sx * (1 - fx * fx))

    def forward(self, x):
        return self.F.apply(x)


class FReLU(nn.Layer):
    # FReLU activation https://arxiv.org/abs/2007.11824
    def __init__(self, c1, k=3):  # ch_in, kernel
        super().__init__()
        self.conv = nn.Conv2D(c1, c1, k, 1, 1, groups=c1)
        self.bn = nn.BatchNorm2D(c1)

    def forward(self, x):
        return paddle.maximum(x, self.bn(self.conv(x)))


class AconC(nn.Layer):
    r""" ACON activation (activate or not)
    AconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is a learnable parameter
    according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """

    def __init__(self, c1):
        super().__init__()
        self.p1 = paddle.create_parameter([1, c1, 1, 1], "float32", default_initializer=Normal())
        self.p2 = paddle.create_parameter([1, c1, 1, 1], "float32", default_initializer=Normal())
        self.beta = paddle.create_parameter([1, c1, 1, 1], "float32", default_initializer=Normal())

    def forward(self, x):
        dpx = (self.p1 - self.p2) * x
        return dpx * F.sigmoid(self.beta * dpx) + self.p2 * x


class MetaAconC(nn.Layer):
    r""" ACON activation (activate or not)
    MetaAconC: (p1*x-p2*x) * sigmoid(beta*(p1*x-p2*x)) + p2*x, beta is generated by a small network
    according to "Activate or Not: Learning Customized Activation" <https://arxiv.org/pdf/2009.04759.pdf>.
    """

    def __init__(self, c1, k=1, s=1, r=16):  # ch_in, kernel, stride, r
        super().__init__()
        c2 = max(r, c1 // r)
        self.p1 = paddle.create_parameter([1, c1, 1, 1], "float32", default_initializer=Normal())
        self.p2 = paddle.create_parameter([1, c1, 1, 1], "float32", default_initializer=Normal())
        self.fc1 = nn.Conv2D(c1, c2, k, s)
        self.fc2 = nn.Conv2D(c2, c1, k, s)
        # self.bn1 = nn.BatchNorm2D(c2)
        # self.bn2 = nn.BatchNorm2D(c1)

    def forward(self, x):
        y = x.mean(axis=2, keepdim=True).mean(axis=3, keepdim=True)
        # batch-size 1 bug/instabilities https://github.com/ultralytics/yolov5/issues/2891
        # beta = F.sigmoid(self.bn2(self.fc2(self.bn1(self.fc1(y)))))  # bug/unstable
        beta = F.sigmoid(self.fc2(self.fc1(y)))  # bug patch BN layers removed
        dpx = (self.p1 - self.p2) * x
        return dpx * F.sigmoid(beta * dpx) + self.p2 * x
